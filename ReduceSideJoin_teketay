package patent;

import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Patent {
	public static class CitedMapper extends Mapper<Object, Text, Text, Text> {
		protected void map(Object key, Text value, Context context) throws IOException, InterruptedException {
			String line = value.toString();
			String[] parts = line.split(",");
			context.write(new Text(parts[1]), new Text("cited\t" + parts[0]));
		}
	}

	public static class PatentMapper extends Mapper<Object, Text, Text, Text> {

		protected void map(Object key, Text value, Context context) throws IOException, InterruptedException {
			String line1 = value.toString();
			String[] parts = line1.split(",");
			context.write(new Text(parts[0]), new Text("patent\t" + parts[4] + "\t" + parts[1]));
		}
	}

	public static class ReducerJoin extends Reducer<Text, Text, Text, Text> {
		protected void reduce(Text key, Iterable<Text> values, Context context)
				throws IOException, InterruptedException {
			String name = "";
			int count = 0;
			for (Text str : values) {
				String[] parts = str.toString().split("\t");
				if (parts[0].equals("cited")) {
					count++;
				} else if (parts[0].equals("patent")) {
					name = parts[1];
				}
			}
			if (count != 0 && !name.isEmpty()) {
				String str = String.format("%s %d", name, count);
				context.write(new Text(key), new Text(str));
			}
		}
	}

	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration conf = new Configuration();

		Job job = Job.getInstance(conf, "ReducerSideJoin");

		job.setJarByClass(Patent.class);

		job.setOutputValueClass(Text.class);

		job.setOutputKeyClass(Text.class);

		job.setReducerClass(ReducerJoin.class);

		MultipleInputs.addInputPath(job, new Path(args[0]), TextInputFormat.class, CitedMapper.class);

		MultipleInputs.addInputPath(job, new Path(args[1]), TextInputFormat.class, PatentMapper.class);

		Path outputPath = new Path(args[2]);

		FileSystem fs = FileSystem.get(conf);

		if (fs.exists(new Path(args[2]))) {
			fs.delete(new Path(args[2]), true);
		}
		FileOutputFormat.setOutputPath(job, outputPath);
		System.exit(job.waitForCompletion(true) ? 0 : 1);
	}
}
