package alter;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;



public class MyJoin {


	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf , "Reduce side join");
        
        job.setJarByClass(MyJoin.class);
        
        job.setReducerClass(MyCustomReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);
        MultipleInputs.addInputPath(job, new Path(args[0]), TextInputFormat.class,  MyCustomMapper.class);
        MultipleInputs.addInputPath(job, new Path(args[1]), TextInputFormat.class,  MyCustomxMapper.class);
	
        
        
        FileSystem fs = FileSystem.get(conf);
        
        if (fs.exists(new Path(args[2]))) {
            fs.delete(new Path(args[2]), true);
        }
        
        
        Path output = new Path(args[2]);
        
        FileOutputFormat.setOutputPath(job, output);
        System.exit(job.waitForCompletion(true) ? 0 : 1);
	
	}
	
	public static class MyCustomMapper extends Mapper<Object,Text,Text,Text>{
		
		protected void map(Object key, Text value, Context context)
				throws IOException, InterruptedException {
			String spr1 = value.toString();
			String[] val = spr1.split(",");
			context.write(new Text(val[0]), new Text("cust\t"+val[2]));
			
			
		
		}
	}

public static class MyCustomxMapper extends Mapper<Object,Text,Text,Text>{
		
		protected void map(Object key, Text value, Context context)
				throws IOException, InterruptedException {
			String spr2 = value.toString();
			String[] val = spr2.split(",");
			context.write(new Text(val[0]), new Text("trans\t"+ val[1]));
			
			
			
		}
	}
	
	public static class MyCustomReducer extends Reducer<Text,Text,Text,Text>{
		@Override
		protected void reduce(Text key, Iterable<Text> values,Context context)
				throws IOException, InterruptedException {
			int cnt=0;
			//double total=0;
			String name="";
             for (Text x : values) {
            	 String[] rec = x.toString().split("\t");
            	 if (rec[0].equals("trans")) {
            		cnt++;
            		
            		//total+=Float.parseFloat(rec[1]);
            		
					
				}
				
            	 else if (rec[0].equals("cust")) {
            		 name = rec[1];
					
			}
            	 
            	 String str = String.format("%d %f", cnt);
            	 context.write(new Text(name), new Text(str));
			}
		}
	}
	


}

