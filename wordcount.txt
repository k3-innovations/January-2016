import java.io.IOException;
import java.util.ArrayList;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class App
{
public static int count1=0;
public static int count=0;
public static class MyMapper extends Mapper<LongWritable, Text, Text, 
IntWritable>{
       
private final static IntWritable one = new IntWritable(1);
        
public static Text word = new Text();
protected void map(LongWritable key, Text value, Context context)
                throws IOException, InterruptedException {              	
           
           	String line =value.toString();
           	String[] words = line.split(" "); 
          
           	for (String str : words) {
          	
           		count++;
          
           		junks.add(str);
			 else
				word.set(str);
                 context.write(word, one);
            }      
           	}
        
    }
    
      
public static class MyReducer extends Reducer<Text, IntWritable, Text, 
IntWritable>
    {
     private IntWritable result = new IntWritable();  
     private Text word = new Text("totalWord");
       
     protected void reduce(Text key, Iterable<IntWritable> values,
     Context context) throws IOException, InterruptedException {
    
        int sum = 0;
            
        for (IntWritable val : values){
             sum += val.get();
             count1++;  
            }
           
          if (count==count1)
                     
           context.write(key, new IntWritable(sum));
            
            	
       }
       
       
    }
public static void main(String[] args) throws IOException,
   ClassNotFoundException, InterruptedException
    {
    
   Configuration conf = new Configuration();
   Job job = Job.getInstance(conf, "Word Count example");
        
   job.setJarByClass(App.class);
   job.setMapperClass(MyMapper.class);
   job.setReducerClass(MyReducer.class);
   job.setOutputKeyClass(Text.class);
   job.setOutputValueClass(IntWritable.class);     
   FileInputFormat.addInputPath(job, new Path(args[0]));
   FileSystem fs = FileSystem.get(conf);
       
       if (fs.exists(new Path(args[1]))) {
           fs.delete(new Path(args[1]), true);
       }
       
 FileOutputFormat.setOutputPath(job, new Path(args[1]));
       
 System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
    }

