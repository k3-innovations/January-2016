package partitioner;

import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class App {
	public static class MyMapper extends 
Mapper<LongWritable, Text, Text, IntWritable> {

		private final static IntWritable one = new IntWritable(1);

		public static final Text word = new Text();

		@Override
		protected void map(LongWritable key, Text value, Context context)
 throws IOException, InterruptedException {

			String line = value.toString();
			String[] words = line.split(" ");

			for (String str : words) {

				word.set(str);
				context.write(word, one);
			}
		}

	}

	public static class WordPartitioner extends Partitioner<Text, Writable> {
		public int getPartition(Text key, Writable value, int numReduceTasks) {
			String str = key.toString();

			if (numReduceTasks == 0) {
				return 0;
			}
			if (str.equals("hadoop")) {
				return 0;
			}

			else if (str.equals("import")) {
				return 1;
			} else if (str.equals("org.apache.hadoop")) {
				return 2;
			} else {
				return 3;

			}
		}

	}

	public static class MyReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
		private IntWritable result = new IntWritable();

		protected void reduce(Text key, Iterable<IntWritable> values, Context context)
				throws IOException, InterruptedException {

			int sum = 0;

			for (IntWritable val : values) {
				sum += val.get();
				// count1++;
			}

			// if (count==count1)

			context.write(key, new IntWritable(sum));

		}

	}

	public static void main(String[] args) throws IOException,
 ClassNotFoundException, InterruptedException {

		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "Word Count example");

		job.setJarByClass(App.class);
		job.setMapperClass(MyMapper.class);
		job.setReducerClass(MyReducer.class);

		// set partitioner statement
		job.setPartitionerClass(WordPartitioner.class);

		// Number of Reducer tasks.
		job.setNumReduceTasks(5);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);

		FileInputFormat.addInputPath(job, new Path(args[0]));

		FileSystem fs = FileSystem.get(conf);

		if (fs.exists(new Path(args[1]))) {
			fs.delete(new Path(args[1]), true);
		}

		FileOutputFormat.setOutputPath(job, new Path(args[1]));

		System.exit(job.waitForCompletion(true) ? 0 : 1);
	}
}

